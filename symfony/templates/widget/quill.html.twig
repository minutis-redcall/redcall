{% set rand = random(8) %}
<style>
    .ql-editor.ql-blank {
        min-height: 300px;
    }

    #quill-{{ rand }} p {
        color: black !important;
    }
</style>
<div id="quill-{{ rand }}">
    <div id="{{ toolbar }}">
    <span class="ql-formats">
      <select class="ql-font"></select>
      <select class="ql-size">
          <option value="10px">Small</option>
          <option selected>Normal</option>
          <option value="18px">Large</option>
          <option value="32px">Huge</option>
      </select>
    </span>
        <span class="ql-formats">
      <button class="ql-bold"></button>
      <button class="ql-italic"></button>
      <button class="ql-underline"></button>
      <button class="ql-strike"></button>
    </span>
        <span class="ql-formats">
      <select class="ql-color"></select>
      <select class="ql-background"></select>
    </span>
        <span class="ql-formats">
      <button class="ql-blockquote"></button>
      <button class="ql-code-block"></button>
    </span>
        <span class="ql-formats">
      <button class="ql-link"></button>
      <button class="ql-image"></button>
    </span>
        <span class="ql-formats">
      <button class="ql-list" value="ordered"></button>
      <button class="ql-list" value="bullet"></button>
      <button class="ql-indent" value="-1"></button>
      <button class="ql-indent" value="+1"></button>
    </span>
        <span class="ql-formats">
      <select class="ql-align"></select>
    </span>
    </div>
    <div style="min-height:300px;" id="{{ editor }}"></div>
</div>


<script type="text/javascript">

    {# Richtext editor for emails #}
    var editor = new Quill('#{{ editor }}', {
        theme: 'snow',
        modules: {
            toolbar: '#toolbar-container'
        },
        bounds: document.body,
    });
    editor.root.innerHTML = '{{ field.vars.value|e('js') }}';

    var BackgroundStyle = Quill.import('attributors/style/background');
    Quill.register(BackgroundStyle, true);

    var ColorStyle = Quill.import('attributors/style/color');
    Quill.register(ColorStyle, true);

    var SizeStyle = Quill.import('attributors/style/size');
    Quill.register(SizeStyle, true);

    var FontStyle = Quill.import('attributors/style/font');
    Quill.register(FontStyle, true);

    var AlignStyle = Quill.import('attributors/style/align');
    Quill.register(AlignStyle, true);

    const Parchment = Quill.import("parchment")
    const pixelLevels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

    const TAB_MULTIPLIER = 30;

    class IndentAttributor extends Parchment.Attributor.Style {
        add(node, value) {
            return super.add(node, `${+value * TAB_MULTIPLIER}px`)
        }

        value(node) {
            return parseFloat(super.value(node)) / TAB_MULTIPLIER || undefined // Don't return NaN
        }
    }

    const IndentStyle = new IndentAttributor("indent", "margin-left", {
        scope: Parchment.Scope.BLOCK,
        whitelist: pixelLevels.map(value => `${value * TAB_MULTIPLIER}px`),
    });

    Quill.register({"formats/indent": IndentStyle}, true);

    editor.on('text-change', function () {
        $('#{{ field.vars.id }}').val(
                editor.root.innerHTML,
        );
        if (typeof refreshPreview === 'function') {
            refreshPreview();
        }
    });

    {# See: https://github.com/quilljs/quill/issues/2096 #}
    const Inline = Quill.import('blots/inline');

    class CustomColor extends Inline {
        constructor(domNode, value) {
            super(domNode, value);

            // Map <font> properties
            domNode.style.color = domNode.color;

            const span = this.replaceWith(new Inline(Inline.create()));

            span.children.forEach(child => {
                if (child.attributes) child.attributes.copy(span);
                if (child.unwrap) child.unwrap();
            });

            this.remove();

            return span;
        }
    }

    CustomColor.blotName = "customColor";
    CustomColor.tagName = "FONT";

    Quill.register(CustomColor, true);

</script>
