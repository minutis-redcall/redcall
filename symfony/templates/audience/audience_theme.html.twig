{% block audience_widget %}

    {% import 'macros.html.twig' as macros %}

    <div id="{{ form.vars.id }}">

        {# -------------------------------------------------------------------------------- #}
        {# Pre selection #}
        {# -------------------------------------------------------------------------------- #}

        <div class="d-none">
            {{ form_row(form.preselection_key) }}
        </div>

        <div id="pre-selection-summary">
            {{ include('audience/pre_selection_summary.html.twig') }}
        </div>

        <div class="modal fade" id="audience-modal" tabindex="-1" role="dialog" aria-hidden="true">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 id="audience-modal-title" class="modal-title"></h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div id="audience-modal-body" class="modal-body text-center"></div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">{{ 'base.modal.close'|trans }}</button>
                    </div>
                </div>
            </div>
        </div>

        <div id="audience-form" class="{% if preselection %}d-none{% endif %}">

            <div class="h3">
                {{ 'audience.audience'|trans }}
            </div>

            <p>{{ 'audience.audience_help'|trans }}</p>

            <br/>

            {# -------------------------------------------------------------------------------- #}
            {# Manual selection #}
            {# -------------------------------------------------------------------------------- #}

            {% if app.user.structures|length > 1 %}
                <div class="h4">
                    {{ 'audience.manual_selection'|trans }}
                </div>
            {% endif %}

            {{ form_label(form.volunteers) }}
            {{ form_widget(form.volunteers, {
                'attr': {
                    'class': 'flexdatalist numbers no-badge-counts',
                    'multiple': "multiple",
                    'placeholder': 'base.search.placeholder'|trans,
                    'data-url': path('audience_search_volunteer'),
                    'data-data': volunteers_data|json_encode,
                    'data-search-disabled': true,
                    'data-min-length': 1,
                    'data-visible-properties': '["human"]',
                    'data-no-results-text': 'base.search.no_results'|trans,
                    'data-focus-first-result': true,
                    'data-selection-required': true,
                    'data-text-property': "human",
                    'data-value-property': "id",
                }
            }) }}

            <br/>

            <div id="show-copy-paste-external-ids">
                <a href="#" class="btn btn-sm btn-secondary"
                   onclick="$('#copy-paste-external-ids').removeClass('d-none');$('#show-copy-paste-external-ids').addClass('d-none');return false;">
                    {{ 'audience.copy_paste'|trans }}
                </a>
            </div>

            <div id="copy-paste-external-ids" class="d-none">
                {{ form_row(form.external_ids, {
                    'attr': {
                        'class': 'numbers no-badge-counts'
                    }
                }) }}
            </div>

            <br/>

            {# -------------------------------------------------------------------------------- #}
            {# Structure tree #}
            {# -------------------------------------------------------------------------------- #}
            <div class="d-none">
                {{ form_row(form.structures_global) }}
                {{ form_row(form.structures_local) }}
            </div>

            {% if app.user.structures|length > 1 %}

                <div class="h4">
                    {{ 'audience.structures'|trans }}
                </div>

                {# All structure ticks, in the tree view #}
                {% macro renderSlider(form, global, local, hierarchy, information, current, ticked = false) %}
                    {% set ticked = ticked or current in global or current in local %}

                    {# A user may not have access to a children structure #}
                    {% if hierarchy[current] is defined %}

                        {% set has_children = hierarchy[current]|length %}

                        <div class="structure-node">
                            {# Slider header #}
                            <label class="switch">
                                <input id="global-structure-{{ current }}"
                                       type="checkbox"
                                       class="toggle-to-text structure-tick numbers"
                                       {% if ticked %}checked{% endif %}
                                       data-field="#{{ form.structures_global.vars.id }}"
                                       data-id="{{ current }}"/>
                                <span class="slider"></span>
                            </label>
                            {% if has_children %}
                                <a data-toggle="collapse" href="#container-children-{{ current }}">
                                    <label for="global-structure-{{ current }}">
                                        {{ information[current].name }} ({{ information[current].global_count }})
                                    </label>
                                </a>
                            {% else %}
                                <label for="global-structure-{{ current }}">
                                    {{ information[current].name }} ({{ information[current].global_count }})
                                </label>
                            {% endif %}

                            {# Slider body #}
                            {% if has_children %}
                                <div id="container-children-{{ current }}" class="collapse structure-children">
                                    <div class="card card-body">
                                        <div>
                                            <label class="switch">
                                                <input id="local-structure-{{ current }}"
                                                       type="checkbox"
                                                       class="toggle-to-text structure-tick numbers"
                                                       {% if ticked %}checked{% endif %}
                                                       data-field="#{{ form.structures_local.vars.id }}"
                                                       data-id="{{ current }}"/>
                                                <span class="slider"></span>
                                            </label>
                                            <label for="local-structure-{{ current }}">
                                                {{ information[current].name }} ({{ information[current].local_count }})
                                            </label>
                                        </div>
                                        {% for child in hierarchy[current] %}
                                            {% set ticked = ticked or child in global or child in local %}
                                            {{ _self.renderSlider(form, global, local, hierarchy, information, child, ticked) }}
                                        {% endfor %}
                                    </div>
                                </div>
                            {% endif %}
                        </div>

                    {% endif %}
                {% endmacro %}

                {% for structure_id in structures_roots %}
                    {{ _self.renderSlider(form, form.structures_global.vars.data|split(','), form.structures_local.vars.data|split(','), structures_hierarchy, structures_information, structure_id) }}
                {% endfor %}

                <br/>
            {% endif %}

            {# -------------------------------------------------------------------------------- #}
            {# Badges #}
            {# -------------------------------------------------------------------------------- #}

            {% if app.user.structures|length > 1 %}
                <div class="h4">
                    {{ 'audience.badges'|trans }}
                </div>
            {% endif %}

            {# Trigger everyone discarding badges #}
            <div class="form-group">

                <div class="d-none">
                    {{ form_row(form.badges_all) }}
                </div>
                <label class="switch">
                    <input id="badges-all"
                           class="numbers no-badge-counts"
                           onclick="$('#{{ form.badges_all.vars.id }}').prop('checked', $(this).prop('checked'));"
                           type="checkbox"
                           {% if init_data.badges_all %}checked{% endif %}/>
                    <span class="slider"></span>
                </label>
                <label for="badges-all">
                    {{ 'audience.select_all_badges'|trans }}
                    (<span id="badge-count-0" class="badge-count">{{ badge_counts[0] }}</span>)
                </label>
            </div>

            {# Main badges #}
            <div class="row">

                <div class="d-none">
                    {{ form_row(form.badges_ticked) }}
                </div>

                {% set badges_ticked = form.badges_ticked.vars.data|split(',') %}

                {% for badge in badges_public %}
                    <div class="col-md-3">
                        <label class="switch">
                            <input id="badge-{{ badge.id }}"
                                   type="checkbox"
                                   class="toggle-to-text badge-tick numbers no-badge-counts"
                                   {% if init_data.badges_all %}disabled="disabled"{% endif %}
                                    {% if badge.id in badges_ticked %}checked{% endif %}
                                   data-field="#{{ form.badges_ticked.vars.id }}"
                                   data-id="{{ badge.id }}"/>
                            <span class="slider"></span>
                        </label>
                        <label for="badge-{{ badge.id }}" class="badge-tick {% if init_data.badges_all %}disabled{% endif %}">
                            {{ macros.badge(badge) }}
                            (<span id="badge-count-{{ badge.id }}" class="badge-count">{{ badge_counts[badge.id] }}</span>)
                        </label>

                    </div>
                {% endfor %}
            </div>

            <br/>

            {# Other badges search #}
            {% set attr = {
                'class': 'flexdatalist numbers no-badge-counts badge-tick ' ~ (init_data.badges_all ? 'disabled' : ''),
                'multiple': "multiple",
                'placeholder': 'base.search.placeholder'|trans,
                'data-url': path('audience_search_badge'),
                'data-data': badges_searched|json_encode,
                'data-search-disabled': true,
                'data-min-length': 1,
                'data-visible-properties': '["name"]',
                'data-no-results-text': 'base.search.no_results'|trans,
                'data-focus-first-result': true,
                'data-selection-required': true,
                'data-text-property': "name",
                'data-value-property': "id",
            } %}

            {% if init_data.badges_all %}
                {% set attr = attr|merge({
                    'disabled': 'disabled',
                }) %}
            {% endif %}

            <div class="badge-tick {% if init_data.badges_all %}disabled{% endif %}">
                {{ form_row(form.badges_searched, {
                    'attr': attr
                }) }}
            </div>

            {# -------------------------------------------------------------------------------- #}
            {# Allow minors #}
            {# -------------------------------------------------------------------------------- #}

            {{ form_row(form.allow_minors, {
                'attr': {
                    'class': 'numbers',
                }
            }) }}

            {# -------------------------------------------------------------------------------- #}
            {# Excluded volunteers #}
            {# -------------------------------------------------------------------------------- #}

            <div id="excluded-volunteers" data-field="#{{ form.excluded_volunteers.vars.id }}" class="d-none">
                {{ form_row(form.excluded_volunteers) }}
            </div>

            {# -------------------------------------------------------------------------------- #}
            {# Test on me #}
            {# -------------------------------------------------------------------------------- #}

            <div class="d-none">
                {{ form_row(form.test_on_me) }}
            </div>

        </div>

        {# -------------------------------------------------------------------------------- #}
        {# Summary #}
        {# -------------------------------------------------------------------------------- #}

        <div id="classification">

            {{ include('audience/classification.html.twig', {
                classification: classification,
            }) }}

        </div>

    </div>

    {# -------------------------------------------------------------------------------- #}
    {# Javscript #}
    {# -------------------------------------------------------------------------------- #}

    <script type="text/javascript">

        {# Filling up backend fields when ticking structures/badges #}
        $('body').on('click', '.toggle-to-text', function () {
            var tick = $(this);
            if (tick.data('field')) {
                var input = $(tick.data('field'));
            } else {
                var proxy = $(tick.data('proxy'));
                var input = $(proxy.data('field'));
            }
            var list = input.val().split(',');
            if (tick.is(':checked')) {
                if (!list.includes(tick.data('id'))) {
                    list.push(tick.data('id'));
                }
            } else if (!tick.is(':checked')) {
                var index = list.indexOf(tick.data('id').toString());
                if (index >= 0) {
                    list.splice(index, 1);
                }
            }
            input.val(list.join(','));
        });

        {# Handling parent structure selection #}
        var structureTicked = false;
        $('body').on('click', '.structure-tick', function () {
            if (structureTicked) {
                return;
            }
            structureTicked = true;
            var that = $(this);
            if (that.is(':checked')) {
                that.parents().eq(1).find('.structure-children .structure-tick').prop('checked', 'checked');
            } else {
                that.parents().eq(1).find('.structure-children input:is(:checked)').click();
            }
            structureTicked = false;
        });

        {# Handling enabling or disabling badge search according to select all #}
        $('#badges-all').click(function () {
            if ($(this).is(':checked')) {
                $('.badge-tick')
                        .addClass('disabled')
                        .prop('disabled', 'disabled');

                $('#{{ form.badges_searched.vars.id }}').flexdatalist({
                    disabled: true,
                });
            } else {
                $('.badge-tick')
                        .removeClass('disabled')
                        .prop('disabled', false);

                $('#{{ form.badges_searched.vars.id }}').flexdatalist({
                    disabled: false,
                });
            }
        });

        {# Opening the list of problems #}
        $('body').on('click', '#open-problems', function (e) {
            e.preventDefault();
            $('#audience-modal-title').html('{{ 'audience.problems.title'|trans }}');
            $('#audience-modal-body').html('<img src="{{ asset('spinner.gif') }}"/>');
            $('#audience-modal').modal();
            $.post('{{ path('audience_problems', {name: form.vars.full_name}) }}', $('form.trigger').serialize(), function (content) {
                $('#audience-modal-body').html(content);
            });
        });

        {# Opening the list of selected volunteers (large audience) #}
        $('body').on('click', '#open-audience', function (e) {
            e.preventDefault();
            $('#audience-modal-title').html('{{ 'audience.classification.selected'|trans }}');
            $('#audience-modal-body').html('<img src="{{ asset('spinner.gif') }}"/>');
            $('#audience-modal').modal();
            $.post('{{ path('audience_selection', {name: form.vars.full_name}) }}', $('form.trigger').serialize(), function (content) {
                $('#audience-modal-body').html(content);
            });
        });

        {# Excluding a volunteer from the selection or preselection modal #}
        $('body').on('click', '.exclude-volunteer', function (e) {
            e.preventDefault();
            var that = $(this);
            var id = that.data('id');
            $('#include-volunteer-' + id).toggleClass('d-none');
            $('#exclude-volunteer-' + id).toggleClass('d-none');
            $('#toggle-volunteer-exclusion-' + id).click();
        })

        {# Opening the list of selected volunteers (small audience) #}
        {#
        $('body').on('click', '#open-small-audience', function (e) {
            e.preventDefault();
            alert('open small audience!');
        });
        #}

        {# Updating classification and badge counts #}
        var numbersContext = null;
        var numbersLock = false;

        function numbers(withBadgeCounts = 1) {
            numbersContext = {
                withBadgeCounts: withBadgeCounts,
                formData: $('form.trigger').serialize(),
            };

            if (!numbersLock) {
                numbersLock = true;
                updateNumbers();
            }
        }

        function updateNumbers() {
            var withBadgeCounts = numbersContext.withBadgeCounts;
            var formData = numbersContext.formData;

            numbersContext = null;

            if (withBadgeCounts) {
                $('.badge-count').html('<img src="{{ asset('spinner.gif') }}" style="width:25px;"/>');
            }

            $.post('{{ path('audience_numbers', {name: form.vars.full_name}) }}&badge_counts=' + withBadgeCounts, formData, function (data) {
                $('#classification').html(data.classification);

                $('.trigger-launch').html(
                        $('#submit-button-audience').html().replace('%nbr%', data.triggered_count)
                );

                if (withBadgeCounts) {
                    $.each(data.badge_counts, function (badgeId, count) {
                        $('#badge-count-' + badgeId).html(count);
                    });
                }

                if (numbersContext) {
                    updateNumbers();
                } else {
                    numbersLock = false;
                }
            });
        }

        $('body').on('change', '.numbers', function () {
            numbers(
                    !$(this).hasClass('no-badge-counts')
            );
        });

        {# Submit buttons #}
        $(function () {
            $('.trigger-test').click(function (e) {
                e.preventDefault();
                $('#{{ form.test_on_me.vars.id }}').prop('checked', 'checked');
                $('form').attr('target', '_blank').submit();
            });

            $('.trigger-launch').click(function (e) {
                e.preventDefault();
                $('#{{ form.test_on_me.vars.id }}').prop('checked', false);
                $('form').attr('target', '').submit();
            });

            {% if classification.reachable|length %}
            $('.trigger-launch').html(
                    $('#submit-button-audience').html().replace('%nbr%', {{ classification.reachable|length }})
            );
            {% endif %}
        });

        $('body').on('click', '#toggle-audience-form', function () {
            $('#audience-form').toggleClass('d-none');
            if ($('#audience-form').hasClass('d-none')) {
                $('#toggle-audience-form').html('{{ 'audience.pre_selection.use_standard_form'|trans }}');
            } else {
                $('#toggle-audience-form').html('{{ 'audience.pre_selection.close_standard_form'|trans }}');
            }
        });

    </script>

{% endblock %}